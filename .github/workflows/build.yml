name: Build Executables

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  release:
    types: [created]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            output-name: mysql-sea-sync-linux
            output-path: dist/main
          - os: windows-latest
            output-name: mysql-sea-sync-windows.exe
            output-path: dist/main.exe
          - os: macos-latest
            output-name: mysql-sea-sync-macos
            output-path: dist/main
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Build executable with PyInstaller
      run: |
        pyinstaller --onefile --console --name main main.py
        
    - name: Test executable (Linux/macOS)
      if: runner.os != 'Windows'
      run: |
        chmod +x ${{ matrix.output-path }}
        # Test that the executable can start (will exit due to missing config)
        timeout 10 ${{ matrix.output-path }} || true
        
    - name: Test executable (Windows)
      if: runner.os == 'Windows'
      run: |
        # Test that the executable can start (will exit due to missing config)
        ${{ matrix.output-path }}
      continue-on-error: true
      timeout-minutes: 1
        
    - name: Upload artifact
      uses: actions/upload-artifact@v3
      with:
        name: ${{ matrix.output-name }}
        path: ${{ matrix.output-path }}
        retention-days: 90
        
    - name: Upload to release (if release)
      if: github.event_name == 'release'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ${{ matrix.output-path }}
        asset_name: ${{ matrix.output-name }}
        asset_content_type: application/octet-stream